//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&sk { release-after-ms = <60000>; };

/ {
    macros {
        lock: lock {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(Q))>;
            label = "LOCK";
        };

        email: email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp S>;
            label = "EMAIL";
        };

        phone: phone {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N9>;
            label = "PHONE";
        };

        snap: snap {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LS(N4)))>;
            label = "SNAP";
        };

        address: address {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(A)>;
            label = "ADDRESS";
        };

        mark_all_read: mark_all_read {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp STAR &kp U &kp LS(I) &kp STAR &kp N>;
            label = "MARK_ALL_READ";
        };

        smart_period: smart_period {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &sl 0>;
            label = "SMART_PERIOD";
        };

        smart_qmark: smart_qmark {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp QMARK &sl 0>;
            label = "SMART_QMARK";
        };

        smart_space: smart_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &fast_sk LSHIFT>;
            label = "SMART_SPACE";
        };

        quick_approve: quick_approve {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_wait_time 100>,
                <&kp LG(F)>,
                <&macro_wait_time 10>,
                <&kp LS(Q) &kp U &kp I &kp C &kp K &kp SPACE &kp LS(A) &kp P &kp P &kp R &kp O &kp V &kp E>,
                <&macro_wait_time 100>,
                <&kp RET &kp ESC &kp RET>;

            label = "QUICK_APPROVE";
        };

        quick_lgtm: quick_lgtm {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_wait_time 100>,
                <&kp LG(F)>,
                <&macro_wait_time 10>,
                <&kp LS(Q) &kp U &kp I &kp C &kp K &kp SPACE &kp LS(L) &kp LS(G) &kp LS(T) &kp LS(M)>,
                <&macro_wait_time 100>,
                <&kp RET &kp ESC &kp RET>;

            label = "QUICK_LGTM";
        };

        select_word: select_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(RIGHT) &kp LA(LEFT) &kp LA(LS(RIGHT))>;
            label = "SELECT_WORD";
        };

        select_line: select_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(RIGHT) &kp LG(LEFT) &kp LS(LG(RIGHT))>;
            label = "SELECT_LINE";
        };

        test_pd: test_pd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(D)>;
            label = "TEST_PD";
        };

        pin_code: pin_code {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N5>;
            label = "PIN_CODE";
        };

        birthdate: birthdate {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N1>;
            label = "BIRTHDATE";
        };

        rmz: rmz {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(Q)>;
            label = "RMZ";
        };

        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };

        m_release_key_twice: m_release_key_twice {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_1to1 &kp MACRO_PLACEHOLDER>;

            label = "M_RELEASE_KEY_TWICE";
        };

        m_press_key_twice: m_press_key_twice {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_tap>,
                <&m_release_key_twice KP_NUMBER_0>;

            label = "M_PRESS_KEY_TWICE";
        };

        m_hold_mod_press_key: m_hold_mod_press_key {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to1 &kp MACRO_PLACEHOLDER>;

            label = "M_HOLD_MOD_PRESS_KEY";
        };

        la: la {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER &kp LSHFT &kp LCTRL &kp LALT &kp LGUI>;

            label = "LA";
        };

        mark_read: mark_read {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(I) &kp STAR &kp N>;
            label = "MARK_READ";
        };
    };

    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 30 31 32 33 34 35 40 41 42 43>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            require-prior-idle-ms = <0>;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 36 37 38 39>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            require-prior-idle-ms = <50>;
        };

        fast_sk: fast_sticky_key {
            compatible = "zmk,behavior-sticky-key";
            label = "FAST_STICKY_KEY";
            bindings = <&kp>;
            #binding-cells = <1>;
            quick-release;
            release-after-ms = <1000>;
            ignore-modifiers;
        };

        caps_wrd: caps_wrd {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS_WRD";
            #binding-cells = <0>;
            continue-list = <UNDERSCORE MINUS DELETE BACKSPACE>;
        };

        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <135>;
            flavor = "tap-preferred";
            bindings = <&shifted>, <&kp>;
        };

        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&sticky_ht LEFT_SHIFT LEFT_SHIFT>, <&caps_wrd>;
        };

        sticky_ht: sticky_ht {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_HT";
            bindings = <&kp>, <&fast_sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        swap: swapper {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;

            ignored-key-positions = <2>;
        };

        swap_gr: swapper_win {
            compatible = "zmk,behavior-tri-state";
            label = "WINDOW SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LGUI>, <&kp GRAVE>, <&kt LGUI>;
        };

        tabber: tabber {
            compatible = "zmk,behavior-tri-state";
            label = "TABBER";
            #binding-cells = <0>;
            bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;

            ignored-key-positions = <2>;
        };

        ht_kp: ht_kp {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_KP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "tap-preferred";
        };

        mm_shift_tab: mm_shift_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_SHIFT_TAB";
            bindings = <&kp LC(LS(TAB))>, <&kp LS(TAB)>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI|MOD_RGUI)>;
            keep-mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        smart_shift_lt: smart_shift_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "SMART_SHIFT_LT";
            bindings = <&lt>, <&shift_caps>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            require-prior-idle-ms = <0>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43>;
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
         &kp Q         &lt 8 W      &kp E        &lt 7 R            &kp T        &kp Y      &kp U            &kp I                &kp O             &kp P
         &hml LCTRL A  &hml LALT S  &hml LGUI D  &hml LEFT_SHIFT F  &kp G        &kp H      &hmr LSHIFT J    &hmr LGUI K          &hmr LALT L       &hmr LCTRL SQT
&kp TAB  &kp Z         &kp X        &kp C        &kp V              &kp B        &kp N      &kp M            &ht_kp SEMI COMMA    &ht_kp COLON DOT  &kp SLASH       &kp BACKSPACE
                                    &lt 5 ESC    &lt 2 SPACE        &lt 1 TAB    &lt 4 RET  &lt 6 BACKSPACE  &smart_shift_lt 3 0
            >;
        };

        navigation_layer {
            bindings = <
       &swap_gr                &swap                 &mm_shift_tab         &kp LC(TAB)               &none    &none     &none      &none      &none        &kp PAGE_UP
       &sticky_ht LCTRL LCTRL  &sticky_ht LALT LALT  &sticky_ht LGUI LGUI  &sticky_ht LSHIFT LSHIFT  &none    &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT    &kp PAGE_DOWN
&none  &none                   &none                 &kp LC(LEFT)          &kp LC(RIGHT)             &none    &none     &mkp LCLK  &mkp RCLK  &key_repeat  &none          &none
                                                     &bootloader           &none                     &none    &none     &none      &none
            >;
        };

        number_layer {
            bindings = <
       &none                   &kp LBRC              &kp RBRC              &kp LPAR                  &kp RPAR    &none      &as N7  &as N8     &as N9  &none
       &sticky_ht LCTRL LCTRL  &sticky_ht LALT LALT  &sticky_ht LGUI LGUI  &sticky_ht LSHIFT LSHIFT  &none       &none      &as N4  &as N5     &as N6  &as EQUAL
&none  &none                   &none                 &none                 &as LBKT                  &as RBKT    &as GRAVE  &as N1  &as N2     &as N3  &as BSLH   &none
                                                     &none                 &none                     &none       &none      &as N0  &as MINUS
            >;
        };

        other_layer {
            bindings = <
       &none  &none  &none  &none  &none    &none        &none  &none  &none  &none
       &none  &none  &none  &none  &none    &none        &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none        &none  &none  &none  &none  &none
                     &none  &none  &none    &bootloader  &none  &none
            >;
        };

        macro_layer {
            bindings = <
       &lock     &none  &email    &none  &none         &none  &mark_all_read  &mark_read   &none        &pin_code
       &address  &none  &test_pd  &none  &none         &none  &none           &none        &quick_lgtm  &quick_approve
&none  &none     &none  &snap     &none  &birthdate    &none  &phone          &none        &rmz         &lock           &none
                        &none     &none  &kp TAB       &none  &none           &bootloader
            >;
        };

        function_layer {
            bindings = <
       &ext_power EP_OFF  &ext_power EP_ON  &bt BT_CLR    &none         &sys_reset     &kp F12  &kp F7  &kp F8  &kp F9  &rmz
       &none              &none             &none         &none         &none          &kp F11  &kp F4  &kp F5  &kp F6  &none
&none  &bt BT_SEL 0       &bt BT_SEL 1      &bt BT_SEL 2  &bt BT_SEL 3  &none          &kp F10  &kp F1  &kp F2  &kp F3  &lock  &none
                                            &none         &kp CAPSLOCK  &bootloader    &none    &none   &none
            >;
        };

        hyper_layer {
            bindings = <
       &kp LS(LG(LA(LC(Q))))  &kp LG(LA(LS(LC(W))))  &kp LG(LS(LA(LC(E))))  &kp LS(LA(LC(LG(R))))  &kp LS(LA(LC(LG(T))))    &sys_reset             &kp LS(LA(LC(LG(U))))  &kp LS(LG(LC(LA(I))))      &kp LS(LA(LC(LG(O))))    &kp LS(LA(LC(LG(P))))
       &kp LS(LG(LA(LC(A))))  &kp LG(LA(LS(LC(S))))  &kp LG(LS(LA(LC(D))))  &kp LS(LA(LC(LG(F))))  &kp LS(LA(LC(LG(G))))    &kp LS(LA(LC(LG(H))))  &kp LS(LA(LC(LG(J))))  &kp LS(LG(LC(LA(K))))      &kp LS(LA(LC(LG(L))))    &kp LS(LA(LC(LG(SQT))))
&none  &kp LS(LG(LA(LC(Z))))  &kp LG(LA(LS(LC(X))))  &kp LG(LS(LA(LC(C))))  &kp LS(LA(LC(LG(V))))  &kp LS(LA(LC(LG(B))))    &kp LS(LA(LC(LG(N))))  &kp LS(LA(LC(LG(M))))  &kp LS(LG(LC(LA(COMMA))))  &kp LS(LA(LC(LG(DOT))))  &kp LS(LA(LC(LG(FSLH))))  &none
                                                     &none                  &none                  &kp LG(GRAVE)            &none                  &none                  &none
            >;
        };

        win_man_layer {
            bindings = <
       &trans  &trans  &trans  &trans  &trans    &kp LA(LC(LG(Y)))  &kp LA(LG(LC(U)))  &kp LA(LC(LG(I)))      &kp LA(LC(LG(O)))    &trans
       &trans  &trans  &trans  &trans  &trans    &kp LA(LC(LG(H)))  &kp LA(LC(LG(J)))  &kp LA(LC(LG(K)))      &kp LA(LG(LC(L)))    &trans
&none  &trans  &trans  &trans  &trans  &trans    &trans             &kp LA(LC(LG(M)))  &kp LC(LA(LG(COMMA)))  &kp LC(LA(LG(DOT)))  &trans  &none
                       &trans  &trans  &trans    &trans             &trans             &trans
            >;
        };

        word_layer {
            bindings = <
       &trans  &trans  &trans  &trans     &trans    &kp LG(BACKSPACE)  &kp LA(BACKSPACE)  &kp LA(DELETE)  &kp LC(K)      &trans
       &trans  &trans  &trans  &kp LSHFT  &trans    &kp LA(LEFT)       &kp LG(LEFT)       &kp LG(RIGHT)   &kp LA(RIGHT)  &trans
&none  &trans  &trans  &trans  &trans     &trans    &trans             &trans             &select_line    &select_word   &trans  &none
                       &trans  &trans     &trans    &trans             &trans             &trans
            >;
        };
    };
};
